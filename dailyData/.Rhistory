#pull data at the census block level for the 2015 ACS survey
tidycensus::get_acs(geography = "block group", year = 2015, state = "TX", county = "Harris")
tidycensus::load_variables(year = 2015,dataset = "acs5")
j1 <- tidycensus::load_variables(year = 2015,dataset = "acs5")
View(j1)
View(unique(j1$concept))
j1 <- tidycensus::load_variables(year = 2015,dataset = "acs5",variables = c("total population"= B00001_001, "number of houses" = B00002_001))
j1 <- tidycensus::load_variables(year = 2015,dataset = "acs5",variables  = c(totalPopulation = "B00001_001", number0fHouses = "B00002_001"))
#pull data at the census block level for the 2015 ACS survey
d1 <- tidycensus::get_acs(geography = "block group", year = 2015, state = "TX", county = "Harris", , variables  = c(totalPopulation = "B00001_001", number0fHouses = "B00002_001"))
#pull data at the census block level for the 2015 ACS survey
d1 <- tidycensus::get_acs(geography = "block group", year = 2015, state = "TX", county = "Harris", variables  = c(totalPopulation = "B00001_001", number0fHouses = "B00002_001"))
#pull data at the census block level for the 2015 ACS survey
d1 <- tidycensus::get_acs(geography = "block group", year = 2015, state = "TX", county = "Harris County", variables  = c(totalPopulation = "B00001_001", number0fHouses = "B00002_001"))
j1 <- tidycensus::load_variables(year = 2015, dataset = "acs5")
View(d1)
i <- "Harris"
val <- paste0(i," County")
val
d1 <- tidycensus::get_acs(geography = "block group", year = 2015, state = "TX", county = val, variables  = c(totalPopulation = "B00001_001", number0fHouses = "B00002_001"))
dim(d1)
names(d1)
# data frame to hold information
df <- data.frame(matrix(nrow = 0, ncol=4))
names(df) <- c("GEOID","NAME","variable", "estimate")
# data frame to hold information
df <- data.frame(matrix(nrow = 0, ncol=4))
names(df) <- c("GEOID","NAME","variable", "estimate")
df <- dplyr::bind_rows(df, d1)
# data frame to hold information
df <- data.frame(matrix(ncol=4))
names(df) <- c("GEOID","NAME","variable", "estimate")
df <- dplyr::bind_rows(df, d1)
df
View(df)
counties
#counties of interest
counties <- c("Harris", "Fort Bend", "Galveston")
counties
# data frame to hold information
df <- data.frame(matrix(ncol=4))
names(df) <- c("GEOID","NAME","variable", "estimate")
#pull data at the census block level for the 2015 ACS survey
for(i in counties){
val <- paste0(i," County")
d1 <- tidycensus::get_acs(geography = "block group", year = 2015, state = "TX", county = val, variables  = c(totalPopulation = "B00001_001", number0fHouses = "B00002_001"))
df <- dplyr::bind_rows(df, d1)
}
View(df)
# pull spatial data for counties if interest
areas <- get_acs(geography = "block group",
state = "Texas",
county = counties,
geometry = TRUE)
###
# pull census data for the counties of interest and attached values to the
#
#
###
library(tidycensus)
library(tidyverse)
# pull spatial data for counties if interest
areas <- get_acs(geography = "block group",
state = "Texas",
county = counties,
geometry = TRUE)
# pull spatial data for counties if interest
areas <- get_acs(geography = "block group",
variables = c( medianAge = "B01002_001"),
state = "Texas",
county = counties,
geometry = TRUE)
options(tigris_use_cache = TRUE)
# pull spatial data for counties if interest
areas <- get_acs(geography = "block group",
variables = c( medianAge = "B01002_001"),
state = "Texas",
county = c("Harris County", "Fort Bend County", "Galveston County"),
geometry = TRUE)
areas
# pull spatial data for counties if interest
### actually do not need to loop over counties but can provice a list of features.
areas <- get_acs(geography = "block group",
variables = c(medianAge = "B01002_001",totalPopulation = "B00001_001", number0fHouses = "B00002_001"),
state = "Texas",
county = c("Harris County", "Fort Bend County", "Galveston County"),
geometry = TRUE)
areas
tmap::qtm(areas)
# pull in the night light locational data
d1 <- read.csv("D:/temp/F/nrelD/geoSpatialCentroid/covidNightLights/data/houstonDaily/referenceGird/usa_houston.licorr.stats(1).csv")
names(d1)
# pull in the night light locational data
d1 <- read.csv("D:/temp/F/nrelD/geoSpatialCentroid/covidNightLights/data/houstonDaily/referenceGird/usa_houston.licorr.stats(1).csv")
d2 <- sf::st_read("D:/temp/F/nrelD/geoSpatialCentroid/covidNightLights/data/houstonDaily/referenceGird/usa_houston.licorr.stats(1).csv")
head(d2)
d2 <- sf::st_read("D:/temp/F/nrelD/geoSpatialCentroid/covidNightLights/data/houstonDaily/referenceGird/usa_houston.licorr.stats(1).csv",
, options=c("X_POSSIBLE_NAMES=pt_lon","Y_POSSIBLE_NAMES=pt_lat"))
crs(areas)
library(raster)
crs(areas)
?st_read
d2 <- st_transform(x = d2, crs = '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')
d2 <- st_set_crs(x = d2, crs = '+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')
d2 <- st_set_crs(x = d2, value ='+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs')
?st_set_crs
d2
#convert census data to wgs1984
a2 <- st_transform(x = areas, crs = d2)
st_crs(d2)
#convert census data to wgs1984
a2 <- st_transform(x = areas, crs = st_crs(d2))
a2
# extract the geoid for the all points
d3 <- st_intersection(d2, a2)
View(d3)
write.csv(areas,file = "D:/temp/F/nrelD/geoSpatialCentroid/covidNightLights/data/houstonDaily/censusData/initialPull.csv")
names(d2)
names(d3)
#filter to get a list of unique point ids and geomid
d4 <- d3 %>%
dplyr::select(ptid, GEOID)%>%
dplyr::distinct()
dim(d4)
View(d4)
#filter to get a list of unique point ids and geomid
d4 <- d3 %>%
dplyr::select(ptid, GEOID)%>%
dplyr::distinct(.keep_all = TRUE)
head(d4)
write.csv(d4, "D:/temp/F/nrelD/geoSpatialCentroid/covidNightLights/data/houstonDaily/censusData/connectionForIDS.csv")
install.packages("GapAnalysis")
GapAnalysis::GetDatasets()
GapAnalysis::SummaryHTML(Species_list = unique(GapAnalysis::CucurbitaData$species),
Occurrence_data = GapAnalysis::CucurbitaData$species,
Raster_list = GapAnalysis::CucurbitaRasters,
Ecoregions_shp = GapAnalysis::ecoregions,
Pro_areas = GapAnalysis::ProtectedAreas, )
GapAnalysis::SummaryHTML(Species_list = unique(GapAnalysis::CucurbitaData$species),
Occurrence_data = GapAnalysis::CucurbitaData$species,
Raster_list = GapAnalysis::CucurbitaRasters,
Ecoregions_shp = GapAnalysis::ecoregions,
Pro_areas = GapAnalysis::ProtectedAreas,
Output_Folder = "D:/temp" )
species <- unique(GapAnalysis::CucurbitaData$species)
GapAnalysis::SummaryHTML(Species_list = species,
Occurrence_data = GapAnalysis::CucurbitaData$species,
Raster_list = GapAnalysis::CucurbitaRasters,
Ecoregions_shp = GapAnalysis::ecoregions,
Pro_areas = GapAnalysis::ProtectedAreas,
Output_Folder = "D:/temp" )
GapAnalysis::SummaryHTML(Species_list = species,
Occurrence_data = GapAnalysis::CucurbitaData,
Raster_list = GapAnalysis::CucurbitaRasters,
Ecoregions_shp = GapAnalysis::ecoregions,
Pro_areas = GapAnalysis::ProtectedAreas,
Output_Folder = "D:/temp" )
GapAnalysis::ERSex()
?GapAnalysis::ERSex()
##Obtaining occurrences from example
data(CucurbitaData)
Cucurbita_splist <- unique(CucurbitaData$species)
## Obtaining rasterList object. ##
data(CucurbitaRasters)
CucurbitaRasters <- raster::unstack(CucurbitaRasters)
##Obtaining ecoregions shapefile
data(ecoregions)
#Running ERSex
ERSex_df <- ERSex(Species_list = Cucurbita_splist,
Occurrence_data = CucurbitaData,
Raster_list = CucurbitaRasters,
Buffer_distance = 50000,
Ecoregions_shp=ecoregions,
Gap_Map=FALSE)
library(GapAnalysis)
##Obtaining occurrences from example
data(CucurbitaData)
Cucurbita_splist <- unique(CucurbitaData$species)
## Obtaining rasterList object. ##
data(CucurbitaRasters)
CucurbitaRasters <- raster::unstack(CucurbitaRasters)
##Obtaining ecoregions shapefile
data(ecoregions)
#Running ERSex
ERSex_df <- ERSex(Species_list = Cucurbita_splist,
Occurrence_data = CucurbitaData,
Raster_list = CucurbitaRasters,
Buffer_distance = 50000,
Ecoregions_shp=ecoregions,
Gap_Map=FALSE)
Cucurbita_splist
CucurbitaRasters
ecoregions
?GapAnalysis::ERSex()
?GapAnalysis::SummaryHTML
##Obtaining occurrences from example
data(CucurbitaData)
##Obtaining species names from the data
Cucurbita_splist <- unique(CucurbitaData$species)
##Obtaining raster_list
data(CucurbitaRasters)
CucurbitaRasters <- raster::unstack(CucurbitaRasters)
##Obtaining protected areas raster
data(ProtectedAreas)
##Obtaining ecoregions shapefile
data(ecoregions)
##Get datasets
GetDatasets()
##Running SummaryHTML function
summaryHTML_file <- SummaryHTML(Species_list=Cucurbita_splist,
Occurrence_data = CucurbitaData,
Raster_list=CucurbitaRasters,
Pro_areas=ProtectedAreas,
Buffer_distance=50000,
Ecoregions_shp=ecoregions,
Output_Folder=tempdir(),
writeRasters=FALSE)
?GapAnalysis::FCSex()
##Obtaining occurrences from example
data(CucurbitaData)
##Obtaining species names from the data
Cucurbita_splist <- unique(CucurbitaData$species)
##Obtaining raster_list
data(CucurbitaRasters)
CucurbitaRasters <- raster::unstack(CucurbitaRasters)
##Obtaining ecoregions shapefile
data(ecoregions)
#Running all three Ex-situ gap analysis steps using a unique function
FCSex_df <- FCSex(Species_list=Cucurbita_splist,
Occurrence_data=CucurbitaData,
Raster_list=CucurbitaRasters,
Buffer_distance=50000,
Ecoregions_shp=ecoregions,
Gap_Map=TRUE)
